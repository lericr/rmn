(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["MusicNotation`"]


DisplayScore::usage="Creates a visual score.";


ReadScoreFile::usage="Read and validate a music file. The file should have an .rmn extension and use the rmn notation.";


ReadScore::usage="Read and validate a string representation of a score written in the rmn notation.";


EmptyVoice::usage="A representation of a voice that contains no music information.";


EmptyScore::usage="A score representation with no music information.";


Score::usage="A representation of a musical score. Use ReadScore or ReadScoreFile to create a Score from the rmn notation.";


ScoreInformation::usage="Meta information about the score.";


Voice::usage="A container for all of the measures in a score pertaining to one of its voices.";


Measure::usage="A representation of on measure of music in a score.";


Chord::usage="A representation of a collection of notes.";


Silence::usage="A representation of a rest.";


Sustain::usate="A representation of a sustain.";


ReadScoreFile::bad\[LetterSpace]extension="Unrecognized extension in filename `1`";
ReadScoreFile::no\[LetterSpace]file\[LetterSpace]exists="No file exists for `1`";


Begin["rmn`"]


IgnoreDelimiters={"\n"};
LineDelimiters={"\n"};
MeasureDelimiters={"|"};
VoiceIndicator="~";
NoteRE="[abcdefgABCDEFG]";
OctaveRE="\\d?";
AccidentalRE="[+-]?";
RestRE="#|_";
SustainRE="\\.";
VoiceRE="(?m)^(~.*$)?[^~@]*";
VoiceNameRE="(?m)^~+(.*)";
InformationRE="(?m)^@.*$";
InformationPairRE="@([^:]+):(.*)";
MeasureLineRE="(?m)^[^~].*$";


BaseNoteValue["c"]:=0;
BaseNoteValue["d"]:=2;
BaseNoteValue["e"]:=4;
BaseNoteValue["f"]:=5;
BaseNoteValue["g"]:=7;
BaseNoteValue["a"]:=9;
BaseNoteValue["b"]:=11;


BaseNoteValue["C"]:=-12;
BaseNoteValue["D"]:=-10;
BaseNoteValue["E"]:=-8;
BaseNoteValue["F"]:=-7;
BaseNoteValue["G"]:=-5;
BaseNoteValue["A"]:=-3;
BaseNoteValue["B"]:=-1;


OctaveSign["A"|"B"|"C"|"D"|"E"|"F"|"G"]:=-1;
OctaveSign["a"|"b"|"c"|"d"|"e"|"f"|"g"]:=+1;


MeasurePatternQ[s_String]:=!InformationPatternQ[s];


InformationPatternQ[s_String]:=StringMatchQ[s,RegularExpression["^@.+$"]];


SustainQ[n_String]:=StringMatchQ[n,RegularExpression[SustainRE]];


RestQ[n_String]:=StringMatchQ[n,RegularExpression[RestRE]];


Chord[]:=Silence[];


EmptyInformation[]:=ScoreInformation[];


EmptyMeasure[]:=Measure[];


EmptyVoice[]:=Voice["",{EmptyMeasure[]}];


EmptyScore[]:=Score[EmptyInformation[],{EmptyVoice[]}];


ToLines[data_]:=StringSplit[data,LineDelimiters];


ToMeasureData[data_]:=StringSplit[data,MeasureDelimiters,All];


ToChordData[mdata_]:=StringSplit[mdata];


ToNote[ndata_]:=ToNote[Characters[ndata]];
ToNote[{n_?SustainQ,___}]:=Sustain[];
ToNote[{n_?RestQ,___}]:=Silence[];
ToNote[{n_}]:=BaseNoteValue[n];
ToNote[{n__,"+"}]:=1+ToNote[{n}];
ToNote[{n__,"-"}]:=-1+ToNote[{n}];
ToNote[{n_,o_}]:=12 OctaveSign[n] ToExpression[o]+BaseNoteValue[n];


ToChord[notes_]:=Chord@@ToNote/@StringCases[notes,RegularExpression["("<>SustainRE<>")|("<>RestRE<>")|("<>NoteRE<>OctaveRE<>AccidentalRE<>")"]]


ToMeasure[chords:{___}]:=Measure@@MapIndexed[{First[(#2-1)/Length@chords],#1}&,chords];
ToMeasure[mdata_String]:=ToMeasure[ToChord/@ToChordData[mdata]];


ToInformationItem["date",v_]:=Rule["date",DateObject[v]];
ToInformationItem[k_,v_]:=Rule[k,v];


ToInformation[{}]:=EmptyInformation[];
ToInformation[infos_]:=ScoreInformation[Association[StringCases[#,RegularExpression[InformationPairRE]:>ToInformationItem["$1","$2"]]&/@infos]];


ToVoice[""]:=EmptyVoice[];
ToVoice[vdata_]:=
With[
{
voiceNameMaybe=StringCases[vdata,RegularExpression[VoiceNameRE]->"$1"],
measureLines=StringCases[vdata,RegularExpression[MeasureLineRE]]
},
Voice[If[0==Length@voiceNameMaybe,"~anonymous voice~",First@voiceNameMaybe],ToMeasure/@Flatten[ToMeasureData[measureLines]]]
];


ReadScoreFile[scoreFile_]:=
Which[
"rmn"!=FileExtension[scoreFile],Message[ReadScoreFile::bad\[LetterSpace]extension,FileNameTake[scoreFile]];EmptyScore[],
FileExistsQ[scoreFile],ReadScore[ReadString[scoreFile]],
True,Message[ReadScoreFile::no\[LetterSpace]file\[LetterSpace]exists,scoreFile];EmptyScore[]
];


ReadScore[score_String]:=
With[
{
information=StringCases[score,RegularExpression[InformationRE]],
voices=StringCases[StringTrim[StringReplace[score,RegularExpression[InformationRE]->""]],RegularExpression[VoiceRE]]
},
Score[ToInformation[information],ToVoice/@StringTrim/@voices]
];


Voices[EmptyScore[]]={};
Voices[score_Score]:=score[[2]];


Measures[{}]={};
Measures[voice_Voice]:=voice[[2]];


MeasureStaffElements[lineThickness_,lineWidth_,measureWidth_]:=
{GrayLevel[.5],Thickness[lineThickness],Line[{{-lineWidth/2,-3},{-lineWidth/2,14}}],Line[{{measureWidth+lineWidth/2,-3},{measureWidth+lineWidth/2,14}}],Line[{{0,2},{10,2}}],Line[{{0,4},{10,4}}],Line[{{0,5},{10,5}}],Line[{{0,7},{10,7}}],Line[{{0,9},{10,9}}]};


ChordElements[measureWidth_][{hor_,Chord[notes___]}]:=Disk[{.5+hor measureWidth,#},.5]&/@{notes};
ChordElements[measureWidth_][{hor_,Silence[___]}]:={Red,Rectangle[{hor measureWidth,4.5},{1+hor measureWidth,6.5}]};


MeasureElements[measureWidth_,colorFn_][Measure[chords___],{voiceNum_}]:=
{colorFn[voiceNum],ChordElements[measureWidth]/@{chords}};


DisplayMeasure[lineThickness_,lineWidth_,measureWidth_,colorFn_][mvoices:{___Measure}]:=
Graphics[{MeasureStaffElements[lineThickness,lineWidth,measureWidth],MapIndexed[MeasureElements[measureWidth,colorFn],mvoices]}];


DisplayScore[score_String]:=DisplayScore[ReadScore[score]];
DisplayScore[score_Score]:=
With[
{
measureWidth=10,
measureCount=Max[Length[Measures[#]]&/@Voices[score],0],
lineWidth=.5,
colorFn=Function[n,If[OddQ[n],Black,Green]]
},
With[
{
lineThickness=lineWidth/(2 lineWidth+measureWidth)
},
DisplayMeasure[lineThickness,lineWidth,measureWidth,colorFn]/@Transpose[Replace[PadRight[Measures/@Voices[score]],0->EmptyMeasure[],{2}]]
]
];


End[]


EndPackage[]



